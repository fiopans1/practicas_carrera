type token =
  | LAMBDA
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE
  | SUCC
  | PRED
  | ISZERO
  | LET
  | LETREC
  | FIX
  | IN
  | CONCAT
  | LENGTH
  | COMPARE
  | BOOL
  | NAT
  | STRING
  | AS
  | CASE
  | OF
  | LIST
  | NIL
  | CONS
  | ISNIL
  | HEAD
  | TAIL
  | LPAREN
  | RPAREN
  | DOT
  | EQ
  | COLON
  | ARROW
  | LBRACE
  | RBRACE
  | EOF
  | COMMA
  | LBRACKET
  | RBRACKET
  | GT
  | LT
  | OR
  | ID of (string)
  | INTV of (int)
  | IDV of (string)
  | IDV2 of (string)
  | STRINGV of (string)

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
  open Lambda;;
# 56 "parser.ml"
let yytransl_const = [|
  257 (* LAMBDA *);
  258 (* TRUE *);
  259 (* FALSE *);
  260 (* IF *);
  261 (* THEN *);
  262 (* ELSE *);
  263 (* SUCC *);
  264 (* PRED *);
  265 (* ISZERO *);
  266 (* LET *);
  267 (* LETREC *);
  268 (* FIX *);
  269 (* IN *);
  270 (* CONCAT *);
  271 (* LENGTH *);
  272 (* COMPARE *);
  273 (* BOOL *);
  274 (* NAT *);
  275 (* STRING *);
  276 (* AS *);
  277 (* CASE *);
  278 (* OF *);
  279 (* LIST *);
  280 (* NIL *);
  281 (* CONS *);
  282 (* ISNIL *);
  283 (* HEAD *);
  284 (* TAIL *);
  285 (* LPAREN *);
  286 (* RPAREN *);
  287 (* DOT *);
  288 (* EQ *);
  289 (* COLON *);
  290 (* ARROW *);
  291 (* LBRACE *);
  292 (* RBRACE *);
    0 (* EOF *);
  293 (* COMMA *);
  294 (* LBRACKET *);
  295 (* RBRACKET *);
  296 (* GT *);
  297 (* LT *);
  298 (* OR *);
    0|]

let yytransl_block = [|
  299 (* ID *);
  300 (* INTV *);
  301 (* IDV *);
  302 (* IDV2 *);
  303 (* STRINGV *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\002\000\002\000\002\000\002\000\
\002\000\002\000\005\000\005\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\006\000\006\000\006\000\006\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\008\000\008\000\
\010\000\010\000\003\000\003\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\012\000\012\000\015\000\
\015\000\013\000\013\000\016\000\016\000\009\000\009\000\014\000\
\014\000\000\000"

let yylen = "\002\000\
\004\000\004\000\002\000\002\000\001\000\006\000\006\000\006\000\
\008\000\004\000\008\000\010\000\001\000\002\000\002\000\002\000\
\002\000\003\000\002\000\003\000\006\000\005\000\005\000\005\000\
\002\000\004\000\003\000\003\000\001\000\003\000\001\000\001\000\
\001\000\001\000\001\000\003\000\003\000\007\000\000\000\001\000\
\003\000\005\000\001\000\003\000\003\000\001\000\001\000\001\000\
\001\000\003\000\003\000\003\000\004\000\000\000\001\000\003\000\
\005\000\000\000\001\000\003\000\005\000\001\000\003\000\001\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\031\000\032\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\000\000\000\000\035\000\066\000\000\000\000\000\000\000\
\029\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\040\000\000\000\000\000\000\000\004\000\003\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\048\000\049\000\000\000\000\000\000\000\000\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\030\000\000\000\000\000\
\036\000\037\000\000\000\000\000\000\000\027\000\028\000\000\000\
\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\000\000\000\000\000\059\000\026\000\
\000\000\000\000\000\000\000\000\000\000\000\000\063\000\000\000\
\001\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\000\000\000\000\050\000\052\000\000\000\051\000\044\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000\006\000\
\008\000\000\000\000\000\053\000\000\000\065\000\000\000\000\000\
\000\000\042\000\000\000\000\000\000\000\000\000\000\000\038\000\
\009\000\000\000\057\000\061\000\000\000\000\000\000\000\000\000\
\012\000"

let yydgoto = "\002\000\
\029\000\054\000\105\000\031\000\101\000\032\000\033\000\055\000\
\056\000\057\000\081\000\106\000\110\000\107\000\108\000\111\000"

let yysindex = "\005\000\
\165\255\000\000\218\254\000\000\000\000\183\002\193\255\193\255\
\193\255\219\254\220\254\193\255\193\255\193\255\193\255\183\002\
\228\254\231\254\232\254\234\254\235\254\183\002\230\002\229\254\
\000\000\243\254\002\000\000\000\000\000\020\000\193\255\247\254\
\000\000\246\254\000\000\022\255\247\254\247\254\247\254\252\254\
\001\255\247\254\065\255\247\254\065\255\013\255\184\255\184\255\
\184\255\184\255\184\255\006\255\005\255\002\255\007\255\015\255\
\000\000\010\255\183\002\184\255\000\000\000\000\247\254\215\254\
\184\255\183\002\183\002\184\255\247\254\247\254\000\255\000\000\
\000\000\000\000\011\255\184\255\118\255\012\255\000\000\016\255\
\018\255\020\255\024\255\025\255\030\255\000\000\183\002\183\002\
\000\000\000\000\183\002\061\000\070\000\000\000\000\000\040\255\
\066\255\060\255\047\255\035\255\000\000\184\255\051\255\049\255\
\046\255\048\255\052\255\000\000\058\255\045\255\000\000\000\000\
\184\255\193\255\193\255\193\255\193\255\061\255\000\000\057\255\
\000\000\000\000\183\002\183\002\183\002\183\002\067\255\062\255\
\000\000\184\255\184\255\000\000\000\000\184\255\000\000\000\000\
\065\255\247\254\247\254\247\254\059\255\082\255\000\000\000\000\
\000\000\092\255\063\255\000\000\070\255\000\000\074\255\247\254\
\005\255\000\000\184\255\183\002\073\255\069\255\012\255\000\000\
\000\000\083\255\000\000\000\000\076\255\183\002\075\255\000\255\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\084\255\000\000\
\000\000\117\002\000\000\000\000\000\000\000\000\138\002\047\000\
\000\000\000\000\000\000\000\000\093\000\139\000\185\000\000\000\
\000\000\231\000\000\000\021\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\009\255\085\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\067\001\000\000\
\000\000\000\000\000\000\000\000\113\001\159\001\000\000\000\000\
\000\000\000\000\000\000\000\000\090\255\078\255\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\091\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\094\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\205\001\251\001\041\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\102\255\000\000\079\255\087\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\166\002\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\255\255\027\000\000\000\216\255\017\000\000\000\000\000\
\054\000\003\000\000\000\000\000\000\000\012\000\243\255\245\255"

let yytablesize = 1045
let yytable = "\030\000\
\043\000\061\000\094\000\095\000\036\000\001\000\034\000\040\000\
\041\000\047\000\033\000\033\000\048\000\049\000\046\000\050\000\
\051\000\058\000\059\000\062\000\052\000\064\000\065\000\037\000\
\038\000\039\000\066\000\067\000\042\000\043\000\044\000\045\000\
\033\000\068\000\071\000\086\000\087\000\033\000\088\000\033\000\
\100\000\091\000\089\000\033\000\033\000\033\000\013\000\063\000\
\102\000\033\000\090\000\113\000\033\000\033\000\112\000\033\000\
\109\000\092\000\114\000\069\000\121\000\070\000\115\000\116\000\
\097\000\098\000\004\000\005\000\117\000\122\000\123\000\124\000\
\125\000\080\000\082\000\083\000\084\000\085\000\126\000\127\000\
\129\000\130\000\131\000\132\000\135\000\118\000\093\000\133\000\
\017\000\120\000\134\000\096\000\014\000\022\000\099\000\064\000\
\142\000\141\000\147\000\023\000\148\000\155\000\103\000\153\000\
\156\000\024\000\158\000\157\000\025\000\035\000\159\000\028\000\
\162\000\104\000\165\000\166\000\168\000\058\000\060\000\039\000\
\062\000\143\000\144\000\145\000\146\000\054\000\064\000\169\000\
\128\000\041\000\137\000\138\000\139\000\140\000\072\000\073\000\
\074\000\056\000\015\000\136\000\075\000\119\000\150\000\154\000\
\163\000\000\000\076\000\164\000\000\000\000\000\000\000\000\000\
\077\000\152\000\161\000\000\000\149\000\000\000\078\000\000\000\
\151\000\000\000\104\000\079\000\167\000\003\000\004\000\005\000\
\006\000\000\000\000\000\007\000\008\000\009\000\010\000\011\000\
\012\000\000\000\013\000\014\000\015\000\160\000\000\000\000\000\
\016\000\016\000\000\000\000\000\017\000\018\000\019\000\020\000\
\021\000\022\000\004\000\005\000\000\000\000\000\000\000\023\000\
\072\000\073\000\074\000\000\000\000\000\024\000\075\000\000\000\
\025\000\026\000\027\000\028\000\076\000\000\000\000\000\000\000\
\017\000\000\000\077\000\000\000\000\000\022\000\000\000\000\000\
\078\000\000\000\000\000\023\000\000\000\079\000\017\000\000\000\
\000\000\024\000\000\000\000\000\025\000\035\000\000\000\028\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\043\000\043\000\000\000\043\000\043\000\000\000\
\000\000\000\000\000\000\000\000\000\000\043\000\000\000\000\000\
\000\000\000\000\000\000\000\000\019\000\000\000\043\000\000\000\
\043\000\000\000\000\000\000\000\000\000\043\000\043\000\043\000\
\043\000\060\000\000\000\043\000\043\000\043\000\000\000\043\000\
\043\000\043\000\043\000\000\000\043\000\043\000\000\000\043\000\
\013\000\013\000\000\000\013\000\013\000\000\000\000\000\000\000\
\000\000\000\000\000\000\013\000\000\000\000\000\000\000\000\000\
\000\000\000\000\025\000\000\000\013\000\000\000\013\000\000\000\
\000\000\000\000\000\000\013\000\013\000\000\000\000\000\000\000\
\000\000\013\000\013\000\013\000\000\000\000\000\013\000\013\000\
\013\000\000\000\013\000\013\000\000\000\013\000\014\000\014\000\
\000\000\014\000\014\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\000\000\014\000\000\000\014\000\000\000\000\000\000\000\
\000\000\014\000\014\000\000\000\000\000\000\000\000\000\014\000\
\014\000\014\000\000\000\000\000\014\000\014\000\014\000\000\000\
\014\000\014\000\000\000\014\000\015\000\015\000\000\000\015\000\
\015\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\
\000\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\
\015\000\000\000\015\000\000\000\000\000\000\000\000\000\015\000\
\015\000\000\000\000\000\000\000\000\000\015\000\015\000\015\000\
\000\000\000\000\015\000\015\000\015\000\000\000\015\000\015\000\
\000\000\015\000\016\000\016\000\000\000\016\000\016\000\000\000\
\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\
\000\000\000\000\000\000\000\000\022\000\000\000\016\000\000\000\
\016\000\000\000\000\000\000\000\000\000\016\000\016\000\000\000\
\000\000\000\000\000\000\016\000\016\000\016\000\000\000\000\000\
\016\000\016\000\016\000\000\000\016\000\016\000\000\000\016\000\
\017\000\017\000\000\000\017\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\
\000\000\000\000\023\000\000\000\017\000\000\000\017\000\000\000\
\000\000\000\000\000\000\017\000\017\000\000\000\000\000\000\000\
\000\000\017\000\017\000\017\000\000\000\000\000\017\000\017\000\
\017\000\000\000\017\000\017\000\000\000\017\000\019\000\019\000\
\000\000\019\000\019\000\000\000\000\000\000\000\000\000\000\000\
\000\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\024\000\000\000\019\000\000\000\019\000\000\000\000\000\000\000\
\000\000\019\000\019\000\000\000\000\000\000\000\000\000\019\000\
\019\000\019\000\000\000\000\000\019\000\019\000\019\000\000\000\
\019\000\019\000\000\000\019\000\025\000\025\000\000\000\025\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\
\000\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\
\025\000\000\000\025\000\000\000\000\000\000\000\000\000\025\000\
\025\000\000\000\000\000\000\000\000\000\025\000\025\000\025\000\
\000\000\000\000\025\000\025\000\025\000\000\000\025\000\025\000\
\000\000\025\000\018\000\018\000\033\000\018\000\018\000\000\000\
\000\000\000\000\000\000\000\000\000\000\018\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\000\
\018\000\005\000\000\000\000\000\000\000\018\000\018\000\000\000\
\000\000\000\000\000\000\018\000\018\000\018\000\000\000\000\000\
\018\000\018\000\018\000\000\000\018\000\018\000\000\000\018\000\
\020\000\020\000\000\000\020\000\020\000\011\000\000\000\000\000\
\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\020\000\000\000\020\000\000\000\
\000\000\000\000\000\000\020\000\020\000\000\000\000\000\000\000\
\000\000\020\000\020\000\020\000\000\000\000\000\020\000\020\000\
\020\000\000\000\020\000\020\000\000\000\020\000\022\000\022\000\
\000\000\022\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\022\000\000\000\022\000\000\000\000\000\000\000\
\000\000\022\000\022\000\000\000\000\000\000\000\000\000\022\000\
\022\000\022\000\000\000\000\000\022\000\022\000\022\000\000\000\
\022\000\022\000\000\000\022\000\023\000\023\000\000\000\023\000\
\023\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\023\000\000\000\023\000\000\000\000\000\000\000\000\000\023\000\
\023\000\000\000\000\000\000\000\000\000\023\000\023\000\023\000\
\000\000\000\000\023\000\023\000\023\000\000\000\023\000\023\000\
\000\000\023\000\024\000\024\000\000\000\024\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\024\000\000\000\
\024\000\000\000\000\000\000\000\000\000\024\000\024\000\000\000\
\000\000\000\000\000\000\024\000\024\000\024\000\000\000\000\000\
\024\000\024\000\024\000\000\000\024\000\024\000\000\000\024\000\
\021\000\021\000\000\000\021\000\021\000\000\000\000\000\000\000\
\000\000\000\000\000\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\021\000\000\000\021\000\000\000\
\000\000\000\000\000\000\021\000\021\000\000\000\033\000\033\000\
\000\000\021\000\021\000\021\000\000\000\000\000\021\000\021\000\
\021\000\000\000\021\000\021\000\000\000\021\000\000\000\000\000\
\000\000\000\000\000\000\000\000\033\000\000\000\005\000\005\000\
\000\000\033\000\000\000\033\000\000\000\000\000\005\000\033\000\
\000\000\000\000\000\000\000\000\000\000\033\000\000\000\005\000\
\033\000\033\000\000\000\033\000\000\000\000\000\000\000\005\000\
\000\000\000\000\011\000\011\000\000\000\005\000\005\000\000\000\
\000\000\005\000\011\000\005\000\000\000\000\000\000\000\003\000\
\004\000\005\000\006\000\011\000\000\000\007\000\008\000\009\000\
\010\000\011\000\012\000\011\000\013\000\014\000\015\000\000\000\
\000\000\011\000\011\000\016\000\000\000\011\000\017\000\018\000\
\019\000\020\000\021\000\022\000\000\000\000\000\000\000\000\000\
\000\000\023\000\000\000\000\000\000\000\000\000\000\000\024\000\
\000\000\000\000\025\000\035\000\000\000\028\000\003\000\004\000\
\005\000\006\000\000\000\000\000\007\000\008\000\009\000\010\000\
\011\000\012\000\000\000\013\000\014\000\015\000\000\000\000\000\
\000\000\000\000\016\000\000\000\000\000\017\000\018\000\019\000\
\020\000\021\000\022\000\000\000\000\000\000\000\000\000\000\000\
\023\000\000\000\000\000\000\000\000\000\000\000\024\000\000\000\
\000\000\025\000\053\000\000\000\028\000"

let yycheck = "\001\000\
\000\000\000\000\044\001\045\001\006\000\001\000\045\001\045\001\
\045\001\038\001\002\001\003\001\038\001\038\001\016\000\038\001\
\038\001\045\001\032\001\000\000\022\000\031\001\033\001\007\000\
\008\000\009\000\005\001\032\001\012\000\013\000\014\000\015\000\
\024\001\033\001\022\001\030\001\032\001\029\001\037\001\031\001\
\041\001\032\001\036\001\035\001\036\001\037\001\000\000\031\000\
\038\001\041\001\036\001\034\001\044\001\045\001\039\001\047\001\
\045\001\059\000\039\001\043\000\000\000\045\000\039\001\039\001\
\066\000\067\000\002\001\003\001\039\001\000\000\031\001\006\001\
\013\001\047\000\048\000\049\000\050\000\051\000\032\001\045\001\
\030\001\033\001\037\001\036\001\040\001\087\000\060\000\036\001\
\024\001\091\000\033\001\065\000\000\000\029\001\068\000\031\001\
\040\001\037\001\032\001\035\001\039\001\020\001\076\000\045\001\
\013\001\041\001\037\001\045\001\044\001\045\001\037\001\047\001\
\040\001\045\001\032\001\040\001\042\001\040\001\040\001\036\001\
\036\001\123\000\124\000\125\000\126\000\036\001\036\001\168\000\
\102\000\036\001\114\000\115\000\116\000\117\000\017\001\018\001\
\019\001\036\001\000\000\113\000\023\001\088\000\131\000\141\000\
\158\000\255\255\029\001\159\000\255\255\255\255\255\255\255\255\
\035\001\137\000\156\000\255\255\130\000\255\255\041\001\255\255\
\134\000\255\255\045\001\046\001\166\000\001\001\002\001\003\001\
\004\001\255\255\255\255\007\001\008\001\009\001\010\001\011\001\
\012\001\255\255\014\001\015\001\016\001\155\000\255\255\255\255\
\000\000\021\001\255\255\255\255\024\001\025\001\026\001\027\001\
\028\001\029\001\002\001\003\001\255\255\255\255\255\255\035\001\
\017\001\018\001\019\001\255\255\255\255\041\001\023\001\255\255\
\044\001\045\001\046\001\047\001\029\001\255\255\255\255\255\255\
\024\001\255\255\035\001\255\255\255\255\029\001\255\255\255\255\
\041\001\255\255\255\255\035\001\255\255\046\001\000\000\255\255\
\255\255\041\001\255\255\255\255\044\001\045\001\255\255\047\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\022\001\255\255\
\024\001\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\032\001\255\255\035\001\036\001\037\001\255\255\039\001\
\040\001\041\001\042\001\255\255\044\001\045\001\255\255\047\001\
\002\001\003\001\255\255\005\001\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\013\001\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\022\001\255\255\024\001\255\255\
\255\255\255\255\255\255\029\001\030\001\255\255\255\255\255\255\
\255\255\035\001\036\001\037\001\255\255\255\255\040\001\041\001\
\042\001\255\255\044\001\045\001\255\255\047\001\002\001\003\001\
\255\255\005\001\006\001\255\255\255\255\255\255\255\255\255\255\
\255\255\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\022\001\255\255\024\001\255\255\255\255\255\255\
\255\255\029\001\030\001\255\255\255\255\255\255\255\255\035\001\
\036\001\037\001\255\255\255\255\040\001\041\001\042\001\255\255\
\044\001\045\001\255\255\047\001\002\001\003\001\255\255\005\001\
\006\001\255\255\255\255\255\255\255\255\255\255\255\255\013\001\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\022\001\255\255\024\001\255\255\255\255\255\255\255\255\029\001\
\030\001\255\255\255\255\255\255\255\255\035\001\036\001\037\001\
\255\255\255\255\040\001\041\001\042\001\255\255\044\001\045\001\
\255\255\047\001\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\022\001\255\255\
\024\001\255\255\255\255\255\255\255\255\029\001\030\001\255\255\
\255\255\255\255\255\255\035\001\036\001\037\001\255\255\255\255\
\040\001\041\001\042\001\255\255\044\001\045\001\255\255\047\001\
\002\001\003\001\255\255\005\001\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\013\001\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\022\001\255\255\024\001\255\255\
\255\255\255\255\255\255\029\001\030\001\255\255\255\255\255\255\
\255\255\035\001\036\001\037\001\255\255\255\255\040\001\041\001\
\042\001\255\255\044\001\045\001\255\255\047\001\002\001\003\001\
\255\255\005\001\006\001\255\255\255\255\255\255\255\255\255\255\
\255\255\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\022\001\255\255\024\001\255\255\255\255\255\255\
\255\255\029\001\030\001\255\255\255\255\255\255\255\255\035\001\
\036\001\037\001\255\255\255\255\040\001\041\001\042\001\255\255\
\044\001\045\001\255\255\047\001\002\001\003\001\255\255\005\001\
\006\001\255\255\255\255\255\255\255\255\255\255\255\255\013\001\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\022\001\255\255\024\001\255\255\255\255\255\255\255\255\029\001\
\030\001\255\255\255\255\255\255\255\255\035\001\036\001\037\001\
\255\255\255\255\040\001\041\001\042\001\255\255\044\001\045\001\
\255\255\047\001\002\001\003\001\000\000\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\255\255\
\024\001\000\000\255\255\255\255\255\255\029\001\030\001\255\255\
\255\255\255\255\255\255\035\001\036\001\037\001\255\255\255\255\
\040\001\041\001\042\001\255\255\044\001\045\001\255\255\047\001\
\002\001\003\001\255\255\005\001\006\001\000\000\255\255\255\255\
\255\255\255\255\255\255\013\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\022\001\255\255\024\001\255\255\
\255\255\255\255\255\255\029\001\030\001\255\255\255\255\255\255\
\255\255\035\001\036\001\037\001\255\255\255\255\040\001\041\001\
\042\001\255\255\044\001\045\001\255\255\047\001\002\001\003\001\
\255\255\005\001\006\001\255\255\255\255\255\255\255\255\255\255\
\255\255\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\255\255\024\001\255\255\255\255\255\255\
\255\255\029\001\030\001\255\255\255\255\255\255\255\255\035\001\
\036\001\037\001\255\255\255\255\040\001\041\001\042\001\255\255\
\044\001\045\001\255\255\047\001\002\001\003\001\255\255\005\001\
\006\001\255\255\255\255\255\255\255\255\255\255\255\255\013\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\022\001\255\255\024\001\255\255\255\255\255\255\255\255\029\001\
\030\001\255\255\255\255\255\255\255\255\035\001\036\001\037\001\
\255\255\255\255\040\001\041\001\042\001\255\255\044\001\045\001\
\255\255\047\001\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\255\255\
\024\001\255\255\255\255\255\255\255\255\029\001\030\001\255\255\
\255\255\255\255\255\255\035\001\036\001\037\001\255\255\255\255\
\040\001\041\001\042\001\255\255\044\001\045\001\255\255\047\001\
\002\001\003\001\255\255\005\001\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\013\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\022\001\255\255\024\001\255\255\
\255\255\255\255\255\255\029\001\030\001\255\255\002\001\003\001\
\255\255\035\001\036\001\037\001\255\255\255\255\040\001\041\001\
\042\001\255\255\044\001\045\001\255\255\047\001\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\005\001\006\001\
\255\255\029\001\255\255\031\001\255\255\255\255\013\001\035\001\
\255\255\255\255\255\255\255\255\255\255\041\001\255\255\022\001\
\044\001\045\001\255\255\047\001\255\255\255\255\255\255\030\001\
\255\255\255\255\005\001\006\001\255\255\036\001\037\001\255\255\
\255\255\040\001\013\001\042\001\255\255\255\255\255\255\001\001\
\002\001\003\001\004\001\022\001\255\255\007\001\008\001\009\001\
\010\001\011\001\012\001\030\001\014\001\015\001\016\001\255\255\
\255\255\036\001\037\001\021\001\255\255\040\001\024\001\025\001\
\026\001\027\001\028\001\029\001\255\255\255\255\255\255\255\255\
\255\255\035\001\255\255\255\255\255\255\255\255\255\255\041\001\
\255\255\255\255\044\001\045\001\255\255\047\001\001\001\002\001\
\003\001\004\001\255\255\255\255\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\014\001\015\001\016\001\255\255\255\255\
\255\255\255\255\021\001\255\255\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\255\255\255\255\255\255\255\255\255\255\
\035\001\255\255\255\255\255\255\255\255\255\255\041\001\255\255\
\255\255\044\001\045\001\255\255\047\001"

let yynames_const = "\
  LAMBDA\000\
  TRUE\000\
  FALSE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  LET\000\
  LETREC\000\
  FIX\000\
  IN\000\
  CONCAT\000\
  LENGTH\000\
  COMPARE\000\
  BOOL\000\
  NAT\000\
  STRING\000\
  AS\000\
  CASE\000\
  OF\000\
  LIST\000\
  NIL\000\
  CONS\000\
  ISNIL\000\
  HEAD\000\
  TAIL\000\
  LPAREN\000\
  RPAREN\000\
  DOT\000\
  EQ\000\
  COLON\000\
  ARROW\000\
  LBRACE\000\
  RBRACE\000\
  EOF\000\
  COMMA\000\
  LBRACKET\000\
  RBRACKET\000\
  GT\000\
  LT\000\
  OR\000\
  "

let yynames_block = "\
  ID\000\
  INTV\000\
  IDV\000\
  IDV2\000\
  STRINGV\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 64 "parser.mly"
      ( Bind (_1, _3))
# 542 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 66 "parser.mly"
      ( TyBind (_1, _3))
# 550 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 68 "parser.mly"
      ( Eval _1 )
# 557 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 70 "parser.mly"
      ( EvalTy _1 )
# 564 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 75 "parser.mly"
      ( _1 )
# 571 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 77 "parser.mly"
      ( TmIf (_2, _4, _6) )
# 580 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 79 "parser.mly"
      ( TmAbs (_2, _4, _6) )
# 589 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 81 "parser.mly"
      ( TmLetIn (_2, _4, _6) )
# 598 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 83 "parser.mly"
      ( TmLetIn (_2, TmFix (TmAbs (_2, _4, _6)), _8) )
# 608 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'cases) in
    Obj.repr(
# 85 "parser.mly"
      ( TmCase (_2, _4) )
# 616 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 89 "parser.mly"
    ([_2, _4, _8])
# 625 "parser.ml"
               : 'cases))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'cases) in
    Obj.repr(
# 91 "parser.mly"
    ((_2, _4, _8)::_10)
# 635 "parser.ml"
               : 'cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 95 "parser.mly"
      ( _1 )
# 642 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 97 "parser.mly"
      ( TmSucc _2 )
# 649 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 99 "parser.mly"
      ( TmPred _2 )
# 656 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 101 "parser.mly"
      ( TmIsZero _2 )
# 663 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 103 "parser.mly"
      ( TmFix _2 )
# 670 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 105 "parser.mly"
      ( TmConcat (_2, _3) )
# 678 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 107 "parser.mly"
      ( TmLength _2 )
# 685 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 109 "parser.mly"
      ( TmCompare (_2, _3) )
# 693 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pathTerm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 111 "parser.mly"
      ( TmCons (_3, _5, _6) )
# 702 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 113 "parser.mly"
      ( TmIsNil (_3, _5) )
# 710 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 115 "parser.mly"
      ( TmHead (_3, _5) )
# 718 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 117 "parser.mly"
      ( TmTail (_3, _5) )
# 726 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pathTerm) in
    Obj.repr(
# 119 "parser.mly"
      ( TmApp (_1, _2) )
# 734 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 124 "parser.mly"
      ( TmNil (_3) )
# 741 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 126 "parser.mly"
      ( TmProjection (_1, (string_of_int _3)))
# 749 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 128 "parser.mly"
      ( TmProjection (_1, _3))
# 757 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 130 "parser.mly"
      ( _1 )
# 764 "parser.ml"
               : 'pathTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 134 "parser.mly"
      ( _2 )
# 771 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 136 "parser.mly"
      ( TmTrue )
# 777 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 138 "parser.mly"
      ( TmFalse )
# 783 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 140 "parser.mly"
      ( TmVar _1 )
# 790 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 142 "parser.mly"
      ( let rec f = function
            0 -> TmZero
          | n -> TmSucc (f (n-1))
        in f _1 )
# 800 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 147 "parser.mly"
      ( TmString _1 )
# 807 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordTm) in
    Obj.repr(
# 149 "parser.mly"
      ( TmRecord _2 )
# 814 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tupleTm) in
    Obj.repr(
# 151 "parser.mly"
      ( TmTuple _2 )
# 821 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 153 "parser.mly"
      ( TmVariant (_7,(_2, _4)) )
# 830 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
      ( [] )
# 836 "parser.ml"
               : 'recordTm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'noemptyrecordTm) in
    Obj.repr(
# 159 "parser.mly"
      ( _1 )
# 843 "parser.ml"
               : 'recordTm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 163 "parser.mly"
      ( [_1, _3] )
# 851 "parser.ml"
               : 'noemptyrecordTm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'noemptyrecordTm) in
    Obj.repr(
# 165 "parser.mly"
      ( (_1, _3)::_5 )
# 860 "parser.ml"
               : 'noemptyrecordTm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTy) in
    Obj.repr(
# 170 "parser.mly"
      ( _1 )
# 867 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicTy) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 172 "parser.mly"
      ( TyArr (_1, _3) )
# 875 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 176 "parser.mly"
      ( _2 )
# 882 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 178 "parser.mly"
      ( TyBool )
# 888 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 180 "parser.mly"
      ( TyName _1 )
# 895 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 182 "parser.mly"
      ( TyNat )
# 901 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 184 "parser.mly"
      ( TyString )
# 907 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordTy) in
    Obj.repr(
# 186 "parser.mly"
      ( TyRecord _2 )
# 914 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'variantTy) in
    Obj.repr(
# 188 "parser.mly"
      ( TyVariant _2 )
# 921 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tupleTy) in
    Obj.repr(
# 190 "parser.mly"
      ( TyTuple _2 )
# 928 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 192 "parser.mly"
      ( TyList _3 )
# 935 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 195 "parser.mly"
      ( [] )
# 941 "parser.ml"
               : 'recordTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'noemptyrecordTy) in
    Obj.repr(
# 197 "parser.mly"
      ( _1 )
# 948 "parser.ml"
               : 'recordTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 201 "parser.mly"
      ( [_1, _3] )
# 956 "parser.ml"
               : 'noemptyrecordTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'noemptyrecordTy) in
    Obj.repr(
# 203 "parser.mly"
      ( (_1, _3)::_5 )
# 965 "parser.ml"
               : 'noemptyrecordTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 206 "parser.mly"
      ( [] )
# 971 "parser.ml"
               : 'variantTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'noemptyvariantTy) in
    Obj.repr(
# 208 "parser.mly"
      ( _1 )
# 978 "parser.ml"
               : 'variantTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 212 "parser.mly"
      ( [_1, _3] )
# 986 "parser.ml"
               : 'noemptyvariantTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'noemptyvariantTy) in
    Obj.repr(
# 214 "parser.mly"
      ( (_1, _3)::_5 )
# 995 "parser.ml"
               : 'noemptyvariantTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 218 "parser.mly"
      ( [_1] )
# 1002 "parser.ml"
               : 'tupleTm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tupleTm) in
    Obj.repr(
# 220 "parser.mly"
      ( _1::_3 )
# 1010 "parser.ml"
               : 'tupleTm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 224 "parser.mly"
      ( [_1] )
# 1017 "parser.ml"
               : 'tupleTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tupleTy) in
    Obj.repr(
# 226 "parser.mly"
      ( _1::_3 )
# 1025 "parser.ml"
               : 'tupleTy))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Lambda.command)
